diff --git a/config.py b/config.py
index f60d64c..0364aef 100644
--- a/config.py
+++ b/config.py
@@ -111,7 +111,10 @@ def writesetupfile(deps, basepath, additional_lines):
 
 def main():
     additional_platform_setup = []
-    if (sys.platform == 'win32' and
+    if os.environ['RENIOS_IOS'] == '1':
+        print_('Using iOS configuration...\n')
+        import config_ios as CFG
+    elif (sys.platform == 'win32' and
         # Note that msys builds supported for 2.6 and greater. Use prebuilt.
         (sys.version_info >= (2, 6) or not is_msys_mingw())):
         print_('Using WINDOWS configuration...\n')
diff --git a/config_ios.py b/config_ios.py
new file mode 100644
index 0000000..2d9a0ab
--- /dev/null
+++ b/config_ios.py
@@ -0,0 +1,132 @@
+"""Config for iOS w/ frameworks"""
+
+import os, sys, string
+from glob import glob
+from distutils.sysconfig import get_python_inc
+
+class Dependency:
+    libext = '.a'
+    def __init__(self, name, checkhead, checklib, libs):
+        self.name = name
+        self.inc_dir = None
+        self.lib_dir = None
+        self.libs = libs
+        self.found = 0
+        self.checklib = checklib + self.libext
+        self.checkhead = checkhead
+        self.cflags = ''
+
+    def configure(self, incdirs, libdirs):
+        incname = self.checkhead
+        libnames = self.checklib, self.name.lower()
+        for dir in incdirs:
+            path = os.path.join(dir, incname)
+            if os.path.isfile(path):
+                self.inc_dir = dir
+                break
+        for dir in libdirs:
+            for name in libnames:
+                path = os.path.join(dir, name)
+                if os.path.isfile(path):
+                    self.lib_dir = dir
+                    break
+        if self.lib_dir and self.inc_dir:
+            print (self.name + '        '[len(self.name):] + ': found')
+            self.found = 1
+        else:
+            print (self.name + '        '[len(self.name):] + ': not found')
+
+class FrameworkDependency(Dependency):
+    def configure(self, incdirs, libdirs):
+        # Only search for frameworks found in the iOS SDK
+        BASE_DIRS = [os.environ['SDKROOT'] + '/System/']
+        for n in BASE_DIRS:
+            n += 'Library/Frameworks/'
+            # iOS frameworks store libs directly inside the .framework directory.
+            fmwk = n + self.libs + '.framework/'
+            if os.path.isfile(fmwk + self.libs):
+                print ('Framework ' + self.libs + ' found')
+                self.found = 1
+                self.inc_dir = fmwk + 'Headers'
+                self.cflags = (
+                    '-Xlinker "-framework" -Xlinker "' + self.libs + '"' +
+                    ' -Xlinker "-F' + n + '"')
+                self.origlib = self.libs
+                self.libs = ''
+                return
+        print ('Framework ' + self.libs + ' not found')
+
+
+class DependencyPython:
+    def __init__(self, name, module, header):
+        self.name = name
+        self.lib_dir = ''
+        self.inc_dir = ''
+        self.libs = []
+        self.cflags = ''
+        self.found = 0
+        self.ver = '0'
+        self.module = module
+        self.header = header
+
+    def configure(self, incdirs, libdirs):
+        self.found = 1
+        if self.module:
+            try:
+                self.ver = __import__(self.module).__version__
+            except ImportError:
+                self.found = 0
+        if self.found and self.header:
+            fullpath = os.path.join(get_python_inc(0), self.header)
+            if not os.path.isfile(fullpath):
+                found = 0
+            else:
+                self.inc_dir = os.path.split(fullpath)[0]
+        if self.found:
+            print (self.name + '        '[len(self.name):] + ': found', self.ver)
+        else:
+            print (self.name + '        '[len(self.name):] + ': not found')
+
+DEPS = [
+    Dependency('SDL', 'SDL.h', 'libSDL2', ['SDL2']),
+    Dependency('FONT', 'SDL_ttf.h', 'libSDL_ttf', ['SDL_ttf']),
+    Dependency('IMAGE', 'SDL_image.h', 'libSDL_image', ['SDL_image']),
+    Dependency('MIXER', 'SDL_mixer.h', 'libSDL_mixer', ['SDL_mixer']),
+    Dependency('SMPEG', 'smpeg.h', 'libsmpeg', ['smpeg']),
+    Dependency('PNG', 'png.h', 'libpng', ['png']),
+    Dependency('JPEG', 'jpeglib.h', 'libjpeg', ['jpeg']),
+    Dependency('SCRAP', '', '', []),
+    Dependency('PORTMIDI', 'portmidi.h', 'libportmidi', ['portmidi']),
+    FrameworkDependency('PORTTIME', 'CoreMIDI.h', 'CoreMIDI', 'CoreMIDI'),
+]
+
+
+def main():
+    global DEPS
+
+    print ('Hunting dependencies...')
+
+    # Look for dependencies among the ReniOS dependency build products,
+    # and in the iOS SDK.
+    incdirs = [
+               os.environ['BUILDROOT'] + '/include',
+               os.environ['BUILDROOT'] + '/include/SDL',
+               os.environ['SDKROOT'] + '/usr/include'
+              ]
+    print incdirs
+    libdirs = [
+               os.environ['BUILDROOT'] + '/lib',
+               os.environ['SDKROOT'] + '/usr/lib'
+              ]
+    print libdirs
+
+    newconfig = []
+    for d in DEPS:
+        d.configure(incdirs, libdirs)
+    DEPS[0].cflags = '-Ddarwin ' + DEPS[0].cflags
+    return DEPS
+
+
+if __name__ == '__main__':
+    print ("""This is the configuration subscript for iOS.
+             Please run "config.py" for full configuration.""")
diff --git a/src/_arraysurfarray.c b/src/_arraysurfarray.c
index dc20b29..64b41e3 100644
--- a/src/_arraysurfarray.c
+++ b/src/_arraysurfarray.c
@@ -193,9 +193,6 @@ blit_array(PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_2D(Uint8, Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_2D(Uint8, Uint64);
-                break;
             default:
                 Py_DECREF(cobj);
                 if (!PySurface_UnlockBy(surfobj, (PyObject *) arrayobj)) {
@@ -223,9 +220,6 @@ blit_array(PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_2D(Uint16, Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_2D(Uint16, Uint64);
-                break;
             default:
                 Py_DECREF(cobj);
                 if (!PySurface_UnlockBy(surfobj, (PyObject *) arrayobj)) {
@@ -250,9 +244,6 @@ blit_array(PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_3D(Uint16, Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_3D(Uint16, Uint64);
-                break;
             default:
                 Py_DECREF(cobj);
                 if (!PySurface_UnlockBy(surfobj, (PyObject *) arrayobj)) {
@@ -272,9 +263,6 @@ blit_array(PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_2D_24(Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_2D_24(Uint64);
-                break;
             default:
                 Py_DECREF(cobj);
                 if (!PySurface_UnlockBy(surfobj, (PyObject *) arrayobj)) {
@@ -316,9 +304,6 @@ blit_array(PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_3D_24(Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_3D_24(Uint64);
-                break;
             default:
                 Py_DECREF(cobj);
                 if (!PySurface_UnlockBy(surfobj, (PyObject *) arrayobj)) {
@@ -335,9 +320,6 @@ blit_array(PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_2D(Uint32, Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_2D(Uint32, Uint64);
-                break;
             default:
                 Py_DECREF(cobj);
                 if (!PySurface_UnlockBy(surfobj, (PyObject *) arrayobj)) {
@@ -362,9 +344,6 @@ blit_array(PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_3D(Uint32, Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_3D(Uint32, Uint64);
-                break;
             default:
                 Py_DECREF(cobj);
                 if (!PySurface_UnlockBy(surfobj, (PyObject *) arrayobj)) {
diff --git a/src/_numericsurfarray.c b/src/_numericsurfarray.c
index 4ee8571..9027076 100644
--- a/src/_numericsurfarray.c
+++ b/src/_numericsurfarray.c
@@ -889,9 +889,6 @@ blit_array (PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_2D(Uint8, Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_2D(Uint8, Uint64);
-                break;
             default:
                 if (!PySurface_UnlockBy (surfobj, (PyObject *) array))
                     return NULL;
@@ -914,9 +911,6 @@ blit_array (PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_2D(Uint16, Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_2D(Uint16, Uint64);
-                break;
             default:
                 if (!PySurface_UnlockBy (surfobj, (PyObject *) array))
                     return NULL;
@@ -937,9 +931,6 @@ blit_array (PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_3D(Uint16, Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_3D(Uint16, Uint64);
-                break;
             default:
                 if (!PySurface_UnlockBy (surfobj, (PyObject *) array))
                     return NULL;
@@ -962,9 +953,6 @@ blit_array (PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_2D_24(Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_2D_24(Uint64);
-                break;
             default:
                 if (!PySurface_UnlockBy (surfobj, (PyObject *) array))
                     return NULL;
@@ -985,9 +973,6 @@ blit_array (PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_3D_24(Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_3D_24(Uint64);
-                break;
             default:
                 if (!PySurface_UnlockBy (surfobj, (PyObject *) array))
                     return NULL;
@@ -1010,9 +995,6 @@ blit_array (PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_2D(Uint32, Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_2D(Uint32, Uint64);
-                break;
             default:
                 if (!PySurface_UnlockBy (surfobj, (PyObject *) array))
                     return NULL;
@@ -1033,9 +1015,6 @@ blit_array (PyObject* self, PyObject* arg)
             case sizeof (Uint32):
                 COPYMACRO_3D(Uint32, Uint32);
                 break;
-            case sizeof (Uint64):
-                COPYMACRO_3D(Uint32, Uint64);
-                break;
             default:
                 if (!PySurface_UnlockBy (surfobj, (PyObject *) array))
                     return NULL;
diff --git a/src/surface.c b/src/surface.c
index 1984d96..e4f65b2 100644
--- a/src/surface.c
+++ b/src/surface.c
@@ -1722,7 +1722,7 @@ surf_set_masks (PyObject *self, PyObject *args)
 {
     SDL_Surface *surf = PySurface_AsSurface (self);
     /* Need to use 64bit vars so this works on 64 bit pythons. */
-    Uint64 r, g, b, a;
+    Uint32 r, g, b, a;
 
     if (!PyArg_ParseTuple (args, "(kkkk)", &r, &g, &b, &a))
         return NULL;
@@ -1762,7 +1762,7 @@ static PyObject*
 surf_set_shifts (PyObject *self, PyObject *args)
 {
     SDL_Surface *surf = PySurface_AsSurface (self);
-    Uint64 r, g, b, a;
+    Uint32 r, g, b, a;
 
     if (!PyArg_ParseTuple (args, "(kkkk)", &r, &g, &b, &a))
         return NULL;
